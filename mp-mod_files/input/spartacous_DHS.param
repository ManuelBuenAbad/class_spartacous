#-----CLASS v3.2.0 (branch: , hash: )-----

#------Experiments to test (separated with commas)-----

########################### WARNING ####################################
# This file was showing how to run the base model with Planck 2013 data.
# We leave this file for reference.
# But please use the file base2015.param for Planck 2015! 
# The nuisance parameter names and priors have changed!
########################################################################

data.experiments=['Planck_highl_TTTEEE','Planck_lowl_EE','Planck_lowl_TT','Planck_lensing','bao_boss_dr12','bao_smallz_2014','Pantheon','SH0ES_M','DES','KiDS']

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
data.over_sampling=[1, 5, 2]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list

data.parameters['omega_b']   = [2.2253,   None, None, 0.028,  0.01,   'cosmo']
data.parameters['omega_dm_tot'] = [0.12320,  None, None, 0.0027,    1,   'cosmo']
data.parameters['100*theta_s']  = [ 1.04236,   None, None,   3e-4,    1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [ 3.049,   None, None, 0.0029,    1, 'cosmo']
data.parameters['n_s']          = [0.9724,   None, None, 0.0074,    1, 'cosmo']
data.parameters['tau_reio']     = [0.0565,   0.04, None,  0.013,    1, 'cosmo']
data.parameters['log10z_tr']      = [4.75,  4.0, 5.5,  0.5, 1,   'cosmo']
data.parameters['N_IR']         = [0.55,  0, None,  0.15, 1,   'cosmo']
data.parameters['f_pacdm']      = [0.03,  0, 1.,  0.01, 1,   'cosmo']
# data.parameters['log10GH_ratio']      = [6.0,  1.0, 8.0,  1.0, 1,   'cosmo']
# data.parameters['log10alpha_pac']      = [-0.4251207,  -4.0, -0.05,  1.0, 1,   'cosmo']
# data.parameters['r_g']      = [0.3,  0, 12,  0.5, 1,   'cosmo']


# Nuisance parameter list, same call, except the name does not have to be a class name
data.parameters['A_cib_217']         = [    47.2,     0,   200,     6.2593,     1, 'nuisance']
data.parameters['cib_index']         = [    -1.3,  -1.3,  -1.3,          0,     1, 'nuisance']
data.parameters['xi_sz_cib']         = [    0.42,     0,     1,       0.33,     1, 'nuisance']
data.parameters['A_sz']              = [    7.23,     0,    10,     1.4689,     1, 'nuisance']
data.parameters['ps_A_100_100']      = [   251.0,     0,   400,     29.438,     1, 'nuisance']
data.parameters['ps_A_143_143']      = [    47.4,     0,   400,     9.9484,     1, 'nuisance']
data.parameters['ps_A_143_217']      = [    47.3,     0,   400,     11.356,     1, 'nuisance']
data.parameters['ps_A_217_217']      = [   119.8,     0,   400,     10.256,     1, 'nuisance']
data.parameters['ksz_norm']          = [    0.01,     0,    10,     2.7468,     1, 'nuisance']
data.parameters['gal545_A_100']      = [    8.86,     0,    50,     1.8928,     1, 'nuisance']
data.parameters['gal545_A_143']      = [   11.10,     0,    50,     1.8663,     1, 'nuisance']
data.parameters['gal545_A_143_217']  = [    19.8,     0,   100,     3.8796,     1, 'nuisance']
data.parameters['gal545_A_217']      = [    95.1,     0,   400,     6.9759,     1, 'nuisance']
data.parameters['galf_EE_A_100']     = [   0.055, 0.055, 0.055,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_143'] = [   0.040, 0.040, 0.040,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_217'] = [   0.094, 0.094, 0.094,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143']     = [   0.086, 0.086, 0.086,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143_217'] = [    0.21,  0.21,  0.21,          0,     1, 'nuisance']
data.parameters['galf_EE_A_217']     = [    0.70,  0.70,  0.70,          0,     1, 'nuisance']
data.parameters['galf_EE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['galf_TE_A_100']     = [   0.114,     0,    10,   0.038762,     1, 'nuisance']
data.parameters['galf_TE_A_100_143'] = [   0.134,     0,    10,   0.030096,     1, 'nuisance']
data.parameters['galf_TE_A_100_217'] = [   0.482,     0,    10,   0.086185,     1, 'nuisance']
data.parameters['galf_TE_A_143']     = [   0.224,     0,    10,   0.055126,     1, 'nuisance']
data.parameters['galf_TE_A_143_217'] = [   0.664,     0,    10,   0.082349,     1, 'nuisance']
data.parameters['galf_TE_A_217']     = [    2.08,     0,    10,    0.27175,     1, 'nuisance']
data.parameters['galf_TE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['calib_100T']        = [  999.69,     0,  3000,    0.61251, 0.001, 'nuisance']
data.parameters['calib_217T']        = [  998.16,     0,  3000,    0.63584, 0.001, 'nuisance']
data.parameters['calib_100P']        = [   1.021, 1.021, 1.021,          0,     1, 'nuisance']
data.parameters['calib_143P']        = [   0.966, 0.966, 0.966,          0,     1, 'nuisance']
data.parameters['calib_217P']        = [   1.040, 1.040, 1.040,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_100_100_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_143_143_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_217_217_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_planck']          = [ 1.00061,   0.9,   1.1,     0.0025,     1, 'nuisance']
data.parameters['A_pol']             = [       1,     1,     1,          0,     1, 'nuisance']

data.parameters['M'] 	             = [-19.02, None, None, 0.004, 1, 'nuisance']

# Derived parameters

# data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
# data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
data.parameters['H0']    = [0, None, None, 0,     1,   'derived']
data.parameters['sigma8']       = [0, None, None, 0, 1, 'derived']
data.parameters['S_8']       = [0, None, None, 0, 1, 'derived']
# data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']

# spartacous derived parameters
data.parameters['omega_pacdm']       = [0, None, None, 0, 1, 'derived']
data.parameters['omega_pacdr']       = [0, None, None, 0, 1, 'derived']
data.parameters['N_UV']              = [0, None, None, 0, 1, 'derived']
data.parameters['N_step']              = [0, None, None, 0, 1, 'derived']
data.parameters['xi_pacdr']          = [0, None, None, 0, 1, 'derived']
# data.parameters['alpha_pac']         = [0, None, None, 0, 1, 'derived']
# data.parameters['log10alpha_pac']         = [0, None, None, 0, 1, 'derived']
# data.parameters['Gamma_pac']         = [0, None, None, 0, 1, 'derived']
# data.parameters['GH_ratio']         = [0, None, None, 0, 1, 'derived']
# data.parameters['log10GH_ratio']         = [0, None, None, 0, 1, 'derived']
data.parameters['m_pacdr']         = [0, None, None, 0, 1, 'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/external/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 3.0
data.cosmo_arguments['non linear'] = 'halofit'

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that these
# three species contribute equally
# to the radiation density at large
# redshift, with a total of Neff=3.046

data.cosmo_arguments['N_ur'] = 2.046
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.7137658555036082
data.cosmo_arguments['gauge'] = 'sync'

# spartacous parameters and flags
data.cosmo_arguments['m_pacdm'] = 1000.
data.cosmo_arguments['alpha_pac'] = 1.e-3
data.cosmo_arguments['g_IR'] = 2.
data.cosmo_arguments['g_UV'] = 5.5
# data.cosmo_arguments['r_g'] = 0.466667
data.cosmo_arguments['dark_radiation_sub_statistic'] = 'fermion'
data.cosmo_arguments['ignore N_UV at BBN'] = 'yes'
data.cosmo_arguments['use DTCA'] = 'yes'
data.cosmo_arguments['use DRSA'] = 'yes'
data.cosmo_arguments['initial conditions before step'] = 'no'
data.cosmo_arguments['expand initial conditions'] = 'yes'


# This settings is to get the same
# (arbitrary) reionization width as in CAMB
data.cosmo_arguments['reionization_width']=0.5

#------ Mcmc parameters ----

data.N=10
data.write_step=5


#-----Likelihood-Planck_highl_TTTEEE-----
Planck_highl_TTTEEE.galf_TE_A_100_143_prior_variance = 0.036
Planck_highl_TTTEEE.calib_100T_prior_variance = 0.0007
Planck_highl_TTTEEE.gal545_A_143_prior_center = 10.6
Planck_highl_TTTEEE.gal545_A_100_prior_variance = 2
Planck_highl_TTTEEE.galf_TE_A_217_prior_center = 1.938
Planck_highl_TTTEEE.path_clik = '/work2/05893/ty3898/stampede2/montepython_public/planck/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/hi_l/plik/plik_rd12_HM_v22b_TTTEEE.clik'
Planck_highl_TTTEEE.gal545_A_143_217_prior_variance = 8.5
Planck_highl_TTTEEE.galf_TE_A_217_prior_variance = 0.54
Planck_highl_TTTEEE.galf_TE_A_100_prior_variance = 0.042
Planck_highl_TTTEEE.gal545_A_217_prior_center = 91.9
Planck_highl_TTTEEE.galf_TE_A_100_prior_center = 0.13
Planck_highl_TTTEEE.galf_TE_A_143_prior_variance = 0.072
Planck_highl_TTTEEE.gal545_A_217_prior_variance = 20
Planck_highl_TTTEEE.calib_217T_prior_variance = 0.00065
Planck_highl_TTTEEE.galf_TE_A_143_217_prior_variance = 0.09
Planck_highl_TTTEEE.joint_sz_prior_center = 9.5
Planck_highl_TTTEEE.galf_TE_A_100_143_prior_center = 0.13
Planck_highl_TTTEEE.A_planck_prior_center = 1
Planck_highl_TTTEEE.galf_TE_A_143_prior_center = 0.207
Planck_highl_TTTEEE.gal545_A_143_217_prior_center = 23.5
Planck_highl_TTTEEE.joint_sz_prior = True
Planck_highl_TTTEEE.galf_TE_A_100_217_prior_center = 0.46
Planck_highl_TTTEEE.joint_sz_prior_variance = 3.0
Planck_highl_TTTEEE.A_planck_prior_variance = 0.0025
Planck_highl_TTTEEE.galf_TE_A_100_217_prior_variance = 0.09
Planck_highl_TTTEEE.calib_217T_prior_center = 0.99805
Planck_highl_TTTEEE.galf_TE_A_143_217_prior_center = 0.69
Planck_highl_TTTEEE.calib_100T_prior_center = 1.0002
Planck_highl_TTTEEE.gal545_A_143_prior_variance = 2
Planck_highl_TTTEEE.gal545_A_100_prior_center = 8.6


#-----Likelihood-Planck_lowl_EE-----
Planck_lowl_EE.path_clik = '/work2/05893/ty3898/stampede2/montepython_public/planck/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/low_l/simall/simall_100x143_offlike5_EE_Aplanck_B.clik'


#-----Likelihood-Planck_lowl_TT-----
Planck_lowl_TT.path_clik = '/work2/05893/ty3898/stampede2/montepython_public/planck/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/low_l/commander/commander_dx12_v3_2_29.clik'


#-----Likelihood-Planck_lensing-----
Planck_lensing.path_clik = '/work2/05893/ty3898/stampede2/montepython_public/planck/code/plc_3.0/plc-3.01/../../../baseline/plc_3.0/lensing/smicadx12_Dec5_ftl_mv2_ndclpp_p_teb_consext8.clik_lensing'


#-----Likelihood-bao_boss_dr12-----
bao_boss_dr12.data_file = 'COMBINEDDR12_BAO_consensus_dM_Hz/BAO_consensus_results_dM_Hz.txt'
bao_boss_dr12.rd_fid_in_Mpc = 147.78
bao_boss_dr12.cov_file = 'COMBINEDDR12_BAO_consensus_dM_Hz/BAO_consensus_covtot_dM_Hz.txt'
bao_boss_dr12.data_directory = '/work2/05893/ty3898/stampede2/montepython_public/data'
bao_boss_dr12.rs_rescale = 1.0


#-----Likelihood-bao_smallz_2014-----
bao_smallz_2014.exclude = []
bao_smallz_2014.file = 'bao_smallz_2014.txt'
bao_smallz_2014.data_directory = '/work2/05893/ty3898/stampede2/montepython_public/data'


#-----Likelihood-Pantheon-----
Pantheon.use_nuisance = ['M']
Pantheon.conflicting_experiments = ['JLA_simple', 'JLA']
Pantheon.data_directory = '/work2/05893/ty3898/stampede2/montepython_public/data/Pantheon'
Pantheon.settings = 'pantheon.dataset'


#-----Likelihood-SH0ES_M-----
SH0ES_M.conflicting_experiments = ['JLA_simple', 'JLA']
SH0ES_M.use_nuisance = ['M']
SH0ES_M.sigma = 0.027
SH0ES_M.MB = -19.253


#-----Likelihood-DES-----
DES.s8 = 0.775
DES.sigma1 = 0.026
DES.sigma2 = 0.024


#-----Likelihood-KiDS-----
KiDS.s8 = 0.766
KiDS.sigma1 = 0.02
KiDS.sigma2 = 0.014


#-----------Cosmological-arguments---------
data.cosmo_arguments.update({'P_k_max_h/Mpc': 3.0, 'use DTCA': 'yes', 'N_ur': 2.046, 'm_pacdm': 1000.0, 'g_UV': 5.5, 'gauge': 'sync', 'm_ncdm': 0.06, 'alpha_pac': 0.001, 'initial conditions before step': 'no', 'non linear': 'halofit', 'dark_radiation_sub_statistic': 'fermion', 'g_IR': 2.0, 'ignore N_UV at BBN': 'yes', 'reionization_width': 0.5, 'N_ncdm': 1, 'k_pivot': 0.05, 'output': 'mPk tCl lCl pCl', 'sBBN file': '/work2/05893/ty3898/stampede2/class_spartacous-tca_rsa/external/bbn/sBBN.dat', 'l_max_scalars': 2508, 'expand initial conditions': 'yes', 'use DRSA': 'yes', 'lensing': 'yes', 'T_ncdm': 0.7137658555036082})


#--------Default-Configuration------
data.path['cosmo']	= '/work2/05893/ty3898/stampede2/class_spartacous-tca_rsa'
data.path['root']	= '/work2/05893/ty3898/stampede2/montepython_public'
data.path['data']	= '/work2/05893/ty3898/stampede2/montepython_public/data'
data.path['clik']	= '/work2/05893/ty3898/stampede2/montepython_public/planck/code/plc_3.0/plc-3.01'
data.path['MontePython']	= '/work2/05893/ty3898/stampede2/montepython_public/montepython'
